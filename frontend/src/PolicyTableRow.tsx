import React from "react";
import { gql, useMutation, ApolloError } from "@apollo/client";
import { Link } from "react-router-dom";
import { EditableCell, TextInputCell, PeriodInputCell } from "./EditableCell";
import InsuranceType, { type InsuranceTypes } from "./InsuranceType";
import InsuranceStatus, { type InsuranceStatuses } from "./InsuranceStatus";

// This should be generated by gql.schema
// but I don't have time implementing this
export type Policy = {
  policyId: string;
  provider: string;
  policyNumber: string;
  startDate: string;
  endDate: string;
  createdAt: string;
  status: InsuranceStatuses;
  insuranceType: InsuranceTypes;
  customer: {
    firstName: string;
    lastName: string;
    dateOfBirth: string;
  };
};

export const POLICY_MUTATION = gql`
  mutation UpdatePolicy(
    $policyId: ID!
    $provider: String
    $startDate: String
    $endDate: String
  ) {
    updatePolicy(
      policyId: $policyId
      provider: $provider
      startDate: $startDate
      endDate: $endDate
    ) {
      policyId
      provider
      policyNumber
      startDate
      endDate
      insuranceType
      status
      customer {
        customerId
        firstName
        lastName
      }
    }
  }
`;

function formatDatePeriod([fromString, toString]: string[]) {
  const formatter = new Intl.DateTimeFormat();
  const fromDate = Date.parse(fromString);
  const toDate = Date.parse(toString);

  return `${formatter.format(fromDate)} - ${formatter.format(toDate)}`;
}

export type PolicyTableRowProps = {
  policy: Policy;
};

export default React.memo(function PolicyTableRow({
  policy,
}: PolicyTableRowProps) {
  const [mutatePolicy] = useMutation(POLICY_MUTATION, {
    onCompleted: (data) => {
      // TODO: add toast message about successful operation
    },
    onError: (err: ApolloError) => {
      // TODO: add toast message or indicate about this error somehow
      console.error(err);
    },
  });

  const handleCommitChanges = React.useCallback(
    async <T,>(policyId: string, field: string, newValue: T) => {
      let variables = {};

      if (field === "provider") {
        variables = {
          provider: newValue,
        };
      }

      if (field === "period") {
        const [startDate, endDate] = newValue as unknown as string[];

        variables = {
          startDate,
          endDate,
        };
      }

      await mutatePolicy({
        variables: {
          policyId,
          ...variables,
        },
      });
    },
    [mutatePolicy]
  );

  return (
    <tr className="border-b odd:bg-white even:bg-gray-200">
      <td className="py-4 px-6 text-sm font-medium text-gray-900 whitespace-nowrap">
        {policy.customer.firstName} {policy.customer.lastName}
      </td>
      <td className="py-4 px-6 text-sm text-gray-500 whitespace-nowrap">
        <EditableCell
          field="provider"
          entityId={policy.policyId}
          value={policy.provider}
          inputComponent={TextInputCell}
          onCommitChanges={handleCommitChanges}
        />
      </td>
      <td className="py-4 px-6 text-sm text-gray-500 whitespace-nowrap">
        {policy.policyNumber}
      </td>
      <td className="w-72 py-4 px-6 text-sm text-gray-500 whitespace-nowrap">
        <EditableCell
          field="period"
          entityId={policy.policyId}
          value={[policy.startDate, policy.endDate]}
          valueFormatter={formatDatePeriod}
          inputComponent={PeriodInputCell}
          onCommitChanges={handleCommitChanges}
        />
      </td>
      <td className="py-4 px-6 text-sm text-gray-500 whitespace-nowrap">
        <InsuranceType type={policy.insuranceType} />
      </td>
      <td className="py-4 px-6 text-sm text-gray-500 whitespace-nowrap">
        <InsuranceStatus status={policy.status} />
      </td>
      <td className="py-4 px-6 text-sm font-medium text-right whitespace-nowrap">
        <Link
          className="text-blue-600 hover:underline"
          to={`/policy/${policy.policyId}`}
        >
          Show
        </Link>
      </td>
    </tr>
  );
});
